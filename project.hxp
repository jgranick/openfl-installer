package;


import haxe.io.Bytes;
import lime.project.Asset;
import lime.project.AssetEncoding;
import lime.project.AssetType;
import lime.project.Haxelib;
import lime.project.HXProject;
import lime.project.ProjectXMLParser;
import lime.tools.helpers.StringHelper;
import lime.utils.ByteArray;
import sys.FileSystem;
import sys.io.File;


class Project extends HXProject {
	
	
	public function new () {
		
		super ();
		
		// TODO: Automate version numbers from file names
		
		var haxeVersion = "3.2.1";
		var limeVersion = "2.7.0";
		var openflVersion = "3.4.0";
		
		haxedefs.set ("HAXE_VERSION", haxeVersion);
		haxedefs.set ("LIME_VERSION", limeVersion);
		haxedefs.set ("OPENFL_VERSION", openflVersion);
		
		meta.title = "OpenFL " + openflVersion + " Installer";
		meta.packageName = "com.sample.openflinstaller";
		meta.version = "1.0.0";
		meta.company = "OpenFL";
		
		app.main = "Main";
		app.path = "Export";
		app.file = "openfl-" + openflVersion + "-installer";
		
		window.width = 400;
		window.height = 300;
		
		sources.push ("Source");
		
		haxelibs.push (new Haxelib ("openfl"));
		haxelibs.push (new Haxelib ("actuate"));
		haxelibs.push (new Haxelib ("task"));
		
		merge (new ProjectXMLParser ("Assets/library.bundle/include.xml"));
		
		assets.push (new Asset ("Assets/TradeGothicLTStd.otf", "", null, true));
		assets.push (new Asset ("Assets/haxe-" + haxeVersion + "-win.exe", "haxe", null, true));
		
		if (command != "display") {
			
			var path = "Assets/lime-" + limeVersion + ".zip";
			//var maxResourceSize = 1024 * 1024 * 12;
			var maxResourceSize = 1024 * 1024;
			var stat = FileSystem.stat (path);
			var limeSegments = Math.ceil (stat.size / maxResourceSize);
			var input = File.read (path);
			var bytes = Bytes.alloc (maxResourceSize);
			
			for (i in 0...limeSegments) {
				
				var length = input.readBytes (bytes, 0, maxResourceSize);
				
				if (length < maxResourceSize) {
					
					bytes = bytes.sub (0, length);
					
				}
				
				File.saveBytes (path + ".segment" + i, bytes);
				assets.push (new Asset (path + ".segment" + i, "lime_segment" + i, AssetType.BINARY, !targetFlags.exists ("neko")));
				
			}
			
			input.close ();
			
			haxedefs.set ("LIME_SEGMENT_COUNT", limeSegments);
			
		}
		
		assets.push (new Asset ("Assets/openfl-" + openflVersion + ".zip", "openfl", null, true));
		
	}
	
	
}